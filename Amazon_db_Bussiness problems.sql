-- Business problems --

-- Top Selling Products --
-- TOP 10  products by total sales value and total quantity  --
SELECT oi.product_id,
    p.product_name,
    SUM(oi.price_per_unit * oi.quantity) AS total_sales,
	COUNT(DISTINCT o.order_id) as total_orders
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN orders o ON o.order_id = oi.order_id
GROUP BY p.product_name,oi.product_id
ORDER BY total_sales DESC
LIMIT 10;

ALTER TABLE order_items
ADD COLUMN total_sale FLOAT;

UPDATE order_items
SET total_sale = quantity * price_per_unit;

/*
2. Revenue buy category
calculate total revenue generated by each product category
challenge: Include the percentage contribution of each category to total revenue

*/

SELECT 
p.category_id,
c.category_name,
SUM(total_sale) AS total_sale,
SUM(total_sale)/(SELECT SUM(total_sale) from order_items)*100 as percentage_contribution 
FROM order_items as oi
JOIN products as p
on oi.product_id = p.product_id
LEFT JOIN category as c
on c.category_id = p.category_id
group by p.category_id,c.category_name
order by 3 desc;


/*
 3. Average order value (AOV)
 Compute the average order value for each customer
 Challenge : Include only customers with more than 5 orders.
*/
select 
c.customer_id,
CONCAT(c.first_name,' ',c.last_name) as full_name,
SUM(total_sale)/COUNT(o.order_id) as Avg_Order_Value,
COUNT(o.order_id)as total_orders
FROM orders as o
JOIN customers as c
ON c.customer_id = o.customer_id
JOIN order_items as oi
on oi.order_id = o.order_id
GROUP BY c.customer_id,full_name
HAVING COUNT(o.order_id) > 5;

/*
4.Monthly Sales Trend
Query monthly total sales over the past 2 years
challenge: Display the sales trend , grouping by month ,return current_month sale, last month sale
*/


SELECT 
year, 
month,
total_sale as current_month_sale,
LAG(total_sale,1) OVER(ORDER BY year,month) as last_month_sale
FROM
(
SELECT 
EXTRACT(MONTH FROM order_date) as month,
EXTRACT(YEAR FROM order_date) as year,
ROUND(SUM(oi.total_sale :: NUMERIC),2) as total_sale
FROM orders as o
JOIN order_items as oi
ON o.order_id=oi.order_id
WHERE o.order_date>= CURRENT_DATE - INTERVAL '2 year'
GROUP BY 1,2
ORDER BY year,month 
) as t1;

/*
5.Customers with no purchases
Find customers who have registered but never placed an order
*/

select * 
from customers c 
LEFT JOIN orders o
on c.customer_id=o.customer_id
WHERE o.order_id IS NULL;

-- OR--
SELECT * FROM 
customers
WHERE customer_id NOT IN 
(select distinct customer_id
 FROM orders );

/*
Least-Selling Categories by State
Identify the least selling product category for each state.
Challenge: Include the total sales for that category within each state
*/
WITH ranking_table
AS
(
SELECT cu.state,
c.category_name,
sum(oi.total_sale) as total_sale,
RANK () OVER(PARTITION BY cu.state ORDER BY SUM(oi.total_sale)asc)as rank 
FROM 
orders o
JOIN order_items oi
ON o.order_id = oi.order_id
JOIN  customers cu
ON o.customer_id = cu.customer_id
JOIN products p
ON oi.product_id=p.product_id
JOIN category c
ON p.category_id =c.category_id
GROUP BY cu.state,c.category_name
)
SELECT 
*
FROM ranking_table
WHERE rank = 1;

/*
7. Customer lifetime value (CLTV)
Calculate the total values of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

select 
c.customer_id,
CONCAT(c.first_name,' ',c.last_name) as full_name,
SUM(total_sale) as CLTV,
DENSE_RANK()OVER(ORDER BY SUM(total_sale) DESC) as customer_Ranking
FROM orders as o
JOIN customers as c
ON c.customer_id = o.customer_id
JOIN order_items as oi
on oi.order_id = o.order_id
GROUP BY c.customer_id,full_name
ORDER BY  CLTV  DESC;

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (eg, less than 10 units)
Challenge: Include last restock date and warehouse information.
*/


select
i.inventory_id,
product_name, 
warehouse_id,stock, 
last_stock_date from 
inventory i 
join products p 
on i.product_id= p.product_id
WHERE i.stock <10
order by i.stock desc;

/*
9. Shipping Delays
Identify orders where the shipping date is later than 7 days after the order date
Challenge: Include customers, order details , and delivery provider
*/
select CONCAT(c.first_name,' ',c.last_name) as full_name,

FROM orders as o
join customers c
on o.customer_id = c.customer_id
join shippings s
on o.order_id = s.order_id
WHERE s.shipping_date - o.order_date > 7;

/*
10. Payment Success Rate
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status(eg, failed, pending)
*/
select 
p.payment_status,
count(*) as total_cnt,
count(*)::numeric/(select count(*)from payments)::numeric*100
FROM orders as o
join 
payments as p
ON o.order_id = p.order_id
group by 1;

/*
11. Top performing sellers 
Find the top 5 sellers based on total sales value.
challenge: Include both successful and failed orders, and display their percentage of successful orders
*/
WITH top_sellers AS (
  SELECT 
    s.seller_id,
    s.seller_name,
    SUM(oi.total_sale) AS total_sale
  FROM orders o
  JOIN sellers s ON o.seller_id = s.seller_id
  JOIN order_items oi ON oi.order_id = o.order_id
  GROUP BY s.seller_id, s.seller_name
  ORDER BY total_sale DESC
  LIMIT 5
),
sellers_reports AS (
  SELECT 
    o.seller_id,
    ts.seller_name,
    o.order_status,
    COUNT(*) AS total_orders
  FROM orders o
  JOIN top_sellers ts ON ts.seller_id = o.seller_id
  WHERE o.order_status NOT IN ('Inprogress', 'Returned')
  GROUP BY o.seller_id, ts.seller_name, o.order_status
)
SELECT 
  seller_id,
  seller_name,
  SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) AS completed_orders,
  SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) AS cancelled_orders,
  SUM(total_orders) AS total_orders,
  ROUND(
    SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric /
    SUM(total_orders)::numeric * 100, 2
  ) AS successful_orders_percentage
FROM sellers_reports
GROUP BY seller_id, seller_name;

/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- o - oi - prod
-- group pid sum(total_sale - cogs * qty) as profit

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	-- SUM(total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(total_sale - (p.cogs * oi.quantity))/sum(total_sale) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_units_sold,
    SUM(CASE WHEN o.order_status = 'Returned' THEN oi.quantity ELSE 0 END) AS total_units_returned,
    ROUND(
        SUM(CASE WHEN o.order_status = 'Returned' THEN oi.quantity ELSE 0 END)::numeric /
        NULLIF(SUM(oi.quantity), 0)::numeric * 100, 2
    ) AS return_percentage
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN orders o ON o.order_id = oi.order_id
GROUP BY p.product_id, p.product_name
ORDER BY return_percentage DESC
LIMIT 10;

/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

WITH cte1
AS
(select * 
from sellers
where seller_id
not in 
(
select seller_id 
from orders 
where  order_date>= CURRENT_DATE - INTERVAL '6 month')
)
SELECT o.seller_id,
MAX(o.order_date) as last_sale_date,
MAX(total_sale) as last_sale_amount
FROM orders o
JOIN cte1 
ON cte1.seller_id=o.seller_id 
JOIN order_items oi 
on o.order_id = oi.order_id
GROUP BY o.seller_id;


/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/
WITH customer_summary AS (
  SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    COUNT(DISTINCT CASE WHEN o.order_status = 'Returned' THEN o.order_id END) AS total_returns
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id
  GROUP BY c.customer_id, c.first_name, c.last_name
)

SELECT 
  customer_id,
  customer_name,
  total_orders,
  total_returns,
  CASE 
    WHEN total_returns > 5 THEN 'Returning_customers'
    ELSE 'New'
  END AS cx_category
FROM customer_summary
order by total_returns desc ;

/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/


select * from
customers c
join orders o
on c.customer_id = o.customer_id
join order_items oi 
on o.order_id = oi.order_id;

/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

SELECT 
    s.shipping_providers,
    COUNT(DISTINCT o.order_id) AS total_orders_handled,
    SUM(oi.total_sale) AS total_revenue,
    ROUND(
        COALESCE(AVG(s.return_date - s.shipping_date), 0), 2
    ) AS avg_delivery_days
FROM shippings s
JOIN orders o ON s.order_id = o.order_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.shipping_providers;


/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

-- join o -oi- p 
-- filter 2022
-- group by p id sum(total sale) 


-- join o -oi- p 
-- filter 2023
-- group by p id sum(total sale) 

-- join 1 -2 

WITH last_year_sale AS (
    SELECT 
        p.product_id,
        p.product_name,
        c.category_name,
        SUM(oi.total_sale) AS revenue_2022
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    JOIN category c ON c.category_id = p.category_id
    WHERE EXTRACT(YEAR FROM o.order_date) = 2022
    GROUP BY p.product_id, p.product_name, c.category_name
),
current_year_sale AS (
    SELECT 
        p.product_id,
        SUM(oi.total_sale) AS revenue_2023
    FROM orders o
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    WHERE EXTRACT(YEAR FROM o.order_date) = 2023
    GROUP BY p.product_id
)

SELECT
    ly.product_id,
    ly.product_name,
    ly.category_name,
    ly.revenue_2022,
    cy.revenue_2023,
    ROUND(((cy.revenue_2023 - ly.revenue_2022) / ly.revenue_2022)::numeric, 2) AS revenue_decrease_ratio
FROM last_year_sale ly
JOIN current_year_sale cy ON ly.product_id = cy.product_id
WHERE ly.revenue_2022 > cy.revenue_2023
ORDER BY revenue_decrease_ratio ASC
LIMIT 10;









